#!/usr/bin/env bash

set -euo pipefail

##? Setups the environment
##?
##? Usage:
##?    restorer [-c | --continue]
##?
##? Options:
##?    -h --help      Prints this help
##?    -v --version   Prints this script version
##?    -c --continue  Continue previous install without cloning again your
##?                   dotfiles if they exists. Useful if previous restore fails.
##?

# Script variables
SCRIPT_NAME="Dotly dotfiles recovery"
SCRIPT_VERSION="v1.0.0"

has_sudo() {
    local prompt

    prompt=$(sudo -nv 2>&1)
    if [ $? -eq 0 ]; then
    echo "has_sudo__pass_set"
    elif echo $prompt | grep -q '^sudo:'; then
    echo "has_sudo__needs_pass"
    else
    echo "no_sudo"
    fi
}

# Default values
continue=false

# Arguments
while [[ $# -gt 0 ]]; do
  case "$1" in
  --help | -h)
    cat <<EOF
Usage:
   install [-c | --continue]

Options:
   -h --help      Prints this help
   -v --version   Prints this script version
   -c --continue  Continue previous install withour cloning again your
                  dotfiles if they exists. Useful if previous restore fails.

EOF
    exit 0
    ;;
  --version | -v)
    echo "$SCRIPT_NAME $SCRIPT_VERSION"
    echo
    exit 0
    ;;
  --continue | -c)
    continue=true
    ;;
  *) ;;

  esac
done

DOTLY_LOG_FILE=${DOTLY_LOG_FILE:-$HOME/dotly.log}
export DOTLY_ENV=${DOTLY_ENV:-PROD}
export DOTLY_INSTALLER=true

red='\033[0;31m'
green='\033[0;32m'
purple='\033[0;35m'
normal='\033[0m'

_w() {
  local -r text="${1:-}"
  echo -e "$text"
}
_a() { _w " > $1"; }
_e() { _a "${red}$1${normal}"; }
_s() { _a "${green}$1${normal}"; }
_q() { read -rp "🤔 $1 : " "$2"; }
_pk() { read -rp "Press a key to ${1}... 👇" "REPLY"; }

_log() {
  log_name="$1"
  current_date=$(date "+%Y-%m-%d %H:%M:%S")

  touch "$DOTLY_LOG_FILE"
  echo "----- $current_date - $log_name -----" >>"$DOTLY_LOG_FILE"

  while IFS= read -r log_message; do
    echo "$log_message" >>"$DOTLY_LOG_FILE"
  done

  echo "" >>"$DOTLY_LOG_FILE"
}

current_timestamp() { date +%s; }

backup_dotfiles_dir() {
  if [ -d "${1:-}" ]; then
    local -r backup_path="$1.$(current_timestamp).back"

    _e "The path '$1' already exist"
    _s "Creating a backup in '$backup_path'"

    mv "$1" "$backup_path"
  else
    _a "Ok! dotfiles will be located in: ${purple}$DOTFILES_PATH${normal}"
  fi

  [[ -n "${1:-}" ]] && mkdir -p "$(dirname "${1:-}")"
}

command_exists() {
  type "$1" >/dev/null 2>&1
}

install_brew_osx() {
  if [[ "$OSTYPE" =~ ^[darwin] ]] && ! command_exists brew; then
    _w "Installing brew package manager for macOS 💾"
    /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
  fi
}

package_install() {
  install_brew_osx #Without this it will try to use apt
  # Because apt that is not package manager exists on macOS

  if command_exists dnf; then
    _a "Installing '${*}' using dnf"
    sudo dnf -y install "${*}" >/dev/null 2>&1 | _log "Installing '${*}' using dnf"
  elif command_exists yum; then
    _a "Installing '${*}' using yum"
    yes | sudo yum install "${*}" >/dev/null 2>&1 | _log "Installing '${*}' using yum"
  elif command_exists brew; then
    _a "Installing '${*}' using brew"
    yes | brew install "${*}" 2>&1 | _log "Installign '${*}' using brew"
  elif command_exists pacman; then
    _a "Installing '${*}' using pacman"
    sudo pacman -S --noconfirm "${*}" >/dev/null 2>&1 | _log "Installign '${*}' using pacman"
  elif command_exists apt; then
    _a "Installing '${*}' using apt"
    sudo apt -y install "${*}" >/dev/null 2>&1 | _log "Installign '${*}' using apt"
  else
    _e "Could not install '${*}', no package provider found"
    return 1
  fi

  return 0
}

_w "  ┌────────────────────────────────────┐"
_w "~ │ 🚀 Welcome to the ${green}dotly${normal} restorer!  │ ~"
_w "  └────────────────────────────────────┘"
_w

# Git Install
# In MacOS git is installed if Command Line Tools (CLT) are installed
# and not if git command exists because it exists but ask you to
# install CLT.

_w "Checking if Git is installed"
if [[ "$OSTYPE" =~ ^[darwin] ]] && ! ls /Library/Developer/CommandLineTools >/dev/null 2>&1; then
  # In macOS if we do nothave CLT then we do not have git. This could be wrong
  # but we will want brew later and if we do not have CLT we can not have brew
  #
  # Brew manages the installation of brew so we will intall Brew
  _w "Command Line Tools could not be detected"
  install_brew_osx
  _w
fi

if ! command_exists git; then
  # Other OS checking if git exists...
  if ! package_install git; then
    _e "Could not continue without git"
    exit 1
  fi
fi
_s "Git command exists on this system"
_w

# Check if curl command exists and try to install it if not
if ! command_exists curl; then
  # Other OS checking if git exists...
  if ! package_install curl; then
    _e "Could not continue without git"
    exit 1
  fi
fi
_s "Curl command exists on this system"

# Files locations
_q "Where do you want your dotfiles to be located? (default ~/.dotfiles)" "DOTFILES_PATH"
DOTFILES_PATH="${DOTFILES_PATH:-$HOME/.dotfiles}"
DOTFILES_PATH="$(eval echo "$DOTFILES_PATH")"
export DOTFILES_PATH="$DOTFILES_PATH"

dotly_inner_path="modules/dotly"
export DOTLY_PATH="$DOTFILES_PATH/$dotly_inner_path"
echo $DOTFILES_PATH